{"name":"Richdata.ui","tagline":"基于requirejs和jquery的UI库","body":"# richdata.ui\r\n\r\n这是一个基于requirejs和jquery的UI库，包含数据表格、弹出层、下拉框等常用控件。\r\n\r\n目前还在开发中，功能比较简单，变化比较大，暂时不建议使用。\r\n\r\n## 基本用法：\r\n\r\n第一步，把ui目录复制到项目中。\r\n\r\n第二步，引入脚本。\r\n``` html\r\n\r\n<input type=\"button\" value=\"新增\" id=\"btnAdd\">\r\n\r\n<form action=\"#\" id=\"loginForm\" style=\"display: none\">\r\n  <label for=\"\">用户名</label>\r\n  <input type=\"text\">\r\n  <label for=\"\">邮箱</label>\r\n  <input type=\"text\">\r\n  <button>保存</button>\r\n</form>\r\n\r\n<script src=\"ui/lib/require/require.js\"></script>\r\n<script src=\"ui/config.js\"></script>\r\n```\r\n\r\n第四步，通过require引入要使用的模块，然后初始化。\r\n```html\r\n<script>\r\n  require(['jquery', 'ui.layout'], function($, Layout){\r\n    // 初始化控件\r\n    new Layout('#loginForm', {\r\n      trigger: '#btnAdd',\r\n      width: 500,\r\n      height: 200,\r\n      autoClose: false\r\n    });\r\n  });\r\n</script>\r\n```\r\n\r\n<script src=\"https://raw.githubusercontent.com/hapjs/richdata.ui/master/ui/lib/require/require.js\"></script>\r\n<script src=\"https://raw.githubusercontent.com/hapjs/richdata.ui/master/ui/config.js\"></script>\r\n<script>\r\n  require(['jquery', 'ui.layout', 'ui.msg'], function($, Layout, Msg){\r\n\r\n    Msg('Welcome!');\r\n\r\n    // 初始化控件\r\n    new Layout('#loginForm', {\r\n      trigger: '#btnAdd'\r\n    });\r\n  });\r\n</script>\r\n\r\n以下是目前包含的控件的参数说明：\r\n\r\n## ui.grid \r\n\r\n数据表格控件。\r\n\r\n支持加载本地和远程数据，支持自定义单元格内容。\r\n\r\n暂时不支持分页。\r\n\r\n```js\r\n//\r\nrequire('ui.grid', function(Layout){\r\n\r\n  // 第一个参数：一个<table></table>元素或者它的选择器\r\n  // 第二个参数：配置参数\r\n  var grid = new Grid('#tb', {\r\n\r\n    // AJAX获取远程数据的地址；也可以用data属性来显示本地数据，见下文；\r\n    url: 'data/grid.js',\r\n\r\n    // AJAX方法，仅在定义了url时有效\r\n    method: 'POST',\r\n\r\n    // AJAX参数，仅在定义了url时有效\r\n    params: {\r\n      page: 1,\r\n      pageSize: 9999,\r\n    },\r\n\r\n    // 在定义了url的情况下，data可以是一个函数，用于处理AJAX返回的数据\r\n    // 在没有定义url的情况下，data可以是直接是一个对象数组；\r\n    // 对象数据的格式应该为：[{},{},{},...]\r\n    data: function(json){\r\n      return json.data;\r\n    },\r\n\r\n    // 列信息\r\n    // key是必填的\r\n    columns: [\r\n      { key: 'id', label: 'id' },\r\n      { key: 'name', label: '姓名' },\r\n      { key: 'email', label: '邮箱' },\r\n      { key: 'action', label: '操作', \r\n\r\n        // formatter可以在单元格中显示自定义的内容\r\n        // 第一个参数row为当前行的data对象\r\n        // 第二个参数col为当前列的配置信息\r\n        formatter: function(row, col){\r\n          return '<a href=\"delUser(' + row.id + '):;\">删除</a>';\r\n        } \r\n      }\r\n    ]\r\n  });\r\n\r\n});\r\n```\r\n\r\n## ui.select\r\n\r\n下拉框控件。\r\n\r\n支持加载本地和远程数据。\r\n\r\n```js\r\nrequire('ui.select', function(Layout){\r\n\r\n  // 第一个参数：作为弹窗内容的元素或选择器\r\n  // 第二个参数：配置参数，可选\r\n  var select = new Select('#roleList', {\r\n\r\n    // AJAX获取远程数据的地址；也可以用data属性来显示本地数据，见下文；\r\n    url: 'data/roles.js',\r\n\r\n    // AJAX方法，可选，且仅在定义了url时有效\r\n    method: 'POST',\r\n\r\n    // AJAX参数，可选，且仅在定义了url时有效\r\n    params: {\r\n      page: 1,\r\n      pageSize: 9999,\r\n    },\r\n\r\n    // 在定义了url的情况下，data可以是一个函数，用于处理AJAX返回的数据\r\n    // 在没有定义url的情况下，data可以是直接是一个对象数组；\r\n    // 对象数据的格式应该为：\r\n    //     [{ roleId: '1', roleName: '管理员'},{}, ..]\r\n    data: function(json){\r\n      return json.data;\r\n    },\r\n    \r\n    // 下拉框的值字段\r\n    valueField: 'roleId',\r\n\r\n    // 下拉框的显示字段\r\n    textField: 'roleName',\r\n\r\n    // 插入的数据，可选\r\n    insertData: [{\r\n      value: '',\r\n      text: '请选择'\r\n    }]\r\n\r\n  });\r\n\r\n});\r\n```\r\n\r\n## ui.layout\r\n\r\n弹出层控件。\r\n\r\n支持模态窗口。\r\n\r\n```js\r\n//\r\nrequire('ui.layout', function(Layout){\r\n\r\n  // 第一个参数：作为弹窗内容的元素或选择器\r\n  // 第二个参数：配置参数，可选\r\n  var layout = new Layout('#loginForm', {\r\n    \r\n    // 触发弹窗显示的元素\r\n    trigger: '#btnShowLoginForm',\r\n    \r\n    // 尺寸，默认为自动\r\n    width: 500,\r\n    height: 400,\r\n    \r\n    // 是否显示为模态框\r\n    modal: true,\r\n\r\n    // 是否点击模态框时自动隐藏\r\n    autoClose: true\r\n  });\r\n\r\n});\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}